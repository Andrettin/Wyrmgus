$using namespace gcn;
$using namespace wyrmgus;

#include "video/font.h"

class LuaActionListener
{
	LuaActionListener(lua_State *lua, lua_Object luaref);
};

class CUIButton
{
	CUIButton();

	int X;
	int Y;
	//Wyrmgus start
	bool Clicked;
	//Wyrmgus end
	string Text;
	ButtonStyle *Style;
	LuaActionListener *Callback;
};

$[
_uiButtonCallbacks = {}
CUIButton.SetCallback = function(w, f)
  w.Callback = LuaActionListener(f)
  table.insert(_uiButtonCallbacks, w.Callback)
end
$]

class CMapArea
{
	int get_bottom() const;
};

class vector
{
	TOLUA_TEMPLATE_BIND(T, CUIButton, CUIUserButton, string)

	vector();
	~vector();

	const T& operator[](int index) const;
	T& operator[](int index);
	const T& at(int index) const;
	T& at(int index);

	const T& front() const;
	T& front();
	const T& back() const;
	T& back();

	void push_back(T val);
	void pop_back();

	void assign(int num, const T& val);
	void clear();
	bool empty() const;
	int size() const;
};


class CButtonPanel
{
	int X;
	int Y;
	vector<CUIButton> Buttons;
};

class CInfoPanel
{
	int X;
	int Y;
};

class CUIUserButton
{
	CUIUserButton(); 

	bool Clicked;
	CUIButton Button;
};

class CStatusLine
{
	void Set(const std::string status);
	const std::string &Get();
	void Clear();

	int Width;
	int TextX;
	int TextY;
	font *Font;
};

class CUserInterface
{
	static CUserInterface *get();

	minimap *get_minimap() const;
	
	CInfoPanel InfoPanel;
	CUIButton *SingleSelectedButton;

	vector<CUIButton> SelectedButtons;
	font *MaxSelectedFont;
	int MaxSelectedTextX;
	int MaxSelectedTextY;

	CUIButton *SingleTrainingButton;
	vector<CUIButton> TrainingButtons;
	CUIButton *UpgradingButton;
	CUIButton *ResearchingButton;
	vector<CUIButton> TransportingButtons;
	
	//Wyrmgus start
	CUIButton *IdleWorkerButton;
	CUIButton *LevelUpUnitButton;
	vector<CUIButton> HeroUnitButtons;
	vector<CUIButton> InventoryButtons;
	//Wyrmgus end

	CColor CompletedBarColorRGB;
	bool CompletedBarShadow;

	CButtonPanel ButtonPanel;

	CMapArea MapArea;

	font *MessageFont;

	//Wyrmgus start
	vector<CUIButton> WorldButtons;
	//Wyrmgus end

	vector<CUIUserButton> UserButtons;

	CStatusLine StatusLine;
};

extern ButtonStyle *FindButtonStyle(const std::string style);

extern bool GetMouseScroll(void);
extern void SetMouseScroll(bool enabled);
extern bool GetKeyScroll(void);
extern void SetKeyScroll(bool enabled);
extern bool GetLeaveStops(void);
extern void SetLeaveStops(bool enabled);
extern int GetDoubleClickDelay(void);
extern void SetDoubleClickDelay(int delay);
extern int GetHoldClickDelay(void);
extern void SetHoldClickDelay(int delay);

extern PixelPos CursorScreenPos;

//
//  Guichan
//

class Color
{
	Color(int r, int g, int b, int a = 255);
	int r;
	int g;
	int b;
	int a;
};

class Graphics
{
	enum {
		LEFT = 0,
		CENTER,
		RIGHT
	};
};

class Widget
{
	virtual void setWidth(int width);
	virtual int getWidth() const;
	virtual void setHeight(int height);
	virtual int getHeight() const;
	virtual void setSize(int width, int height);
	virtual void setX(int x);
	virtual int getX() const;
	virtual void setY(int y);
	virtual int getY() const;
	virtual void setPosition(int x, int y);
	virtual void setBorderSize(int width);
	virtual unsigned int getBorderSize() const;
	virtual void setEnabled(bool enabled);
	virtual bool isEnabled() const;
	virtual void setVisible(bool visible);
	virtual bool isVisible() const;

	virtual void setBaseColor(const Color color);
	virtual const Color &getBaseColor() const;
	virtual void setForegroundColor(const Color color);
	virtual const Color &getForegroundColor() const;
	virtual void setBackgroundColor(const Color color);
	virtual const Color &getBackgroundColor() const;
	virtual void setDisabledColor(const Color color);
	virtual const Color &getDisabledColor() const;

	static void setGlobalFont(font *fnt);
	virtual void setForegroundColor(const Color color);
	virtual void setBackgroundColor(const Color color);
	virtual void setBaseColor(const Color color);
	virtual void setSize(int width, int height);
	virtual void setBorderSize(int width);
	virtual void setFont(font *fnt);

	virtual int getHotKey() const;
	virtual void setHotKey(const int key);
	virtual void setHotKey(const char *key);

	virtual void addActionListener(LuaActionListener *actionListener);
	//Wyrmgus start
	virtual void clearActionListeners();
	virtual void requestMoveToBottom();
	virtual void setTooltip(const std::string tooltip);
	//Wyrmgus end
};

$[
Widget.setActionCallback = function(w, f)
  w._actioncb = LuaActionListener(f)
  --Wyrmgus start
  w:clearActionListeners()
  --Wyrmgus end
  w:addActionListener(w._actioncb)
end
$]

class BasicContainer : public Widget
{
};

class ScrollArea : public BasicContainer
{
	ScrollArea();
	virtual void setContent(Widget *widget);
	virtual Widget *getContent();
	virtual void setScrollbarWidth(int width);
	virtual int getScrollbarWidth();
};

class ImageWidget : public Widget
{
	ImageWidget(const std::string image_path, int scale_factor, int image_width, int image_height);
	ImageWidget(const std::string image_path);
};

//Wyrmgus start
class PlayerColorImageWidget : public Widget
{
	PlayerColorImageWidget(const std::string image_path, const std::string playercolor);
	
	void set_frame(int frame);
	void setGrayscale(bool grayscale);
};
//Wyrmgus end

class Button : public Widget
{
	//Wyrmgus start
	virtual const std::string &getTooltip() const;
	virtual void setActsPressed(bool actsPressed);
	virtual bool actsPressed() const;
	//Wyrmgus end
};

class ButtonWidget : public Button
{
	ButtonWidget(const std::string caption);
	virtual void setCaption(const std::string caption);
	virtual const std::string &getCaption() const;
	virtual void adjustSize();
};

class ImageButton : public Button
{
	ImageButton();
	ImageButton(const std::string caption);

	void setNormalImage(const std::string image_path);
	void setPressedImage(const std::string image_path);
	void setDisabledImage(const std::string image_path);
	void setIconFrameImage();
	void setTransparency(int alpha);
};

class PlayerColorImageButton : public Button
{
	PlayerColorImageButton();
	PlayerColorImageButton(const std::string caption, const std::string playercolor);

	void setNormalImage(const std::string image_path);
	void setPressedImage(const std::string image_path);
	void setDisabledImage(const std::string image_path);
	void setIconFrameImage();
	void setTransparency(int alpha);
	void set_frame(int frame);
	void setGrayscale(bool grayscale);
};

class CheckBox : public Widget
{
	CheckBox();
	CheckBox(const std::string caption, bool marked = false);

	virtual bool isMarked() const;
	virtual void setMarked(bool marked);
	virtual const std::string &getCaption() const;
	virtual void setCaption(const std::string caption);
	virtual void adjustSize();
};

class ImageCheckBox : public CheckBox
{
	ImageCheckBox();
	ImageCheckBox(const std::string caption, bool marked = false);

	void setUncheckedNormalImage(const std::string image_path);
	void setUncheckedPressedImage(const std::string image_path);
	void setUncheckedDisabledImage(const std::string image_path);
	void setCheckedNormalImage(const std::string image_path);
	void setCheckedPressedImage(const std::string image_path);
	void setCheckedDisabledImage(const std::string image_path);
};

class Label : public Widget
{
	Label(const std::string caption);
	const std::string &getCaption() const;
	void setCaption(const std::string caption);
	virtual void setAlignment(unsigned int alignment);
	virtual unsigned int getAlignment();
	virtual void adjustSize();
};

class MultiLineLabel : public Widget
{
	MultiLineLabel();
	MultiLineLabel(const std::string caption);

	virtual void setCaption(const std::string caption);
	virtual const std::string &getCaption() const;
	virtual void setAlignment(unsigned int alignment);
	virtual unsigned int getAlignment();
	virtual void setVerticalAlignment(unsigned int alignment);
	virtual unsigned int getVerticalAlignment();
	virtual void setLineWidth(int width);
	virtual int getLineWidth();
	virtual void adjustSize();

	enum {
		LEFT = 0,
		CENTER,
		RIGHT,
		TOP,
		BOTTOM
	};
};

class TextField : public Widget
{
	TextField(const std::string text);
	virtual void setText(const std::string text);
	virtual std::string &getText();
};

class ListBoxWidget : public ScrollArea
{
	ListBoxWidget(unsigned int width, unsigned int height);
	void setList(lua_State *lua, lua_Object *lo);
	void setSelected (int selected);
	int getSelected();
};

class ScrollingWidget : public ScrollArea
{
	ScrollingWidget(int width, int height);
	void add(Widget *widget, int x, int y);
	void restart();
	void setSpeed(float speed);
	float getSpeed();
};

class DropDown : public BasicContainer
{
	virtual int getSelected();
	virtual void setSelected(int selected);
	//Wyrmgus start
	virtual const std::string &getTooltip() const;
	//Wyrmgus end
};

class DropDownWidget : public DropDown
{
	DropDownWidget();
	void setList(lua_State *lua, lua_Object *lo);
	virtual void setSize(int width, int height);
};

class ImageDropDownWidget : public DropDown
{
	ImageDropDownWidget();
	void setList(lua_State *lua, lua_Object *lo);
	virtual void setSize(int width, int height);
	void setItemImage(const std::string image_path);
	void setDownNormalImage(const std::string image_path);
	void setDownPressedImage(const std::string image_path);
};

class StatBoxWidget : public Widget
{
	StatBoxWidget(int width, int height);

	void setCaption(const std::string s);
	const std::string &getCaption() const;
	void setPercent(const int percent);
	int getPercent() const;
};

class Container : public BasicContainer
{
	Container();
	virtual void setOpaque(bool opaque);
	virtual bool isOpaque() const;
	virtual void add(Widget *widget, int x, int y);
	virtual void remove(Widget *widget);
	virtual void clear();
};

class MenuScreen : public Container
{
	MenuScreen();

	void run(bool loop = true);
	void stop();
	void stopAll();
	void addLogicCallback(LuaActionListener *actionListener);
	void setDrawMenusUnder(bool drawunder);
	bool getDrawMenusUnder();
};
$renaming MenuScreen @ CMenuScreen

$[
function MenuScreen()
	local menu = CMenuScreen()

	-- Store the widget in the container. This way we keep a reference
	-- to the widget until the container gets deleted.
	local guichanadd = Container.add
	function menu:add(widget, x, y)
		if not self._addedWidgets then
			self._addedWidgets = {}
		end
		self._addedWidgets[widget] = true
		guichanadd(self, widget, x, y)
	end

	-- Wyrmgus start
	-- allow the removal of menu widgets
	local guichanremove = Container.remove
	function menu:remove(widget)
		if not self._addedWidgets then
			self._addedWidgets = {}
		end
		self._addedWidgets[widget] = false
		guichanremove(self, widget)
	end
	-- Wyrmgus end

	return menu
end
$]

void CenterOnMessage();
void UiFindIdleWorker();
//Wyrmgus start
void UiFindLevelUpUnit();
void UiFindHeroUnit(int hero_index);
//Wyrmgus end
void UiTrackUnit();

extern bool IsMouseLeftButtonPressed();
extern int GetCurrentButtonValue();
extern std::string GetCurrentButtonValueStr();
