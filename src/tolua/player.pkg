enum PlayerTypes {
	PlayerNeutral = 2,
	PlayerNobody  = 3,
	PlayerComputer = 4,
	PlayerPerson = 5,
	PlayerRescuePassive = 6,
	PlayerRescueActive = 7,
};

class CPlayer
{
	static CPlayer *GetThisPlayer();
	static CPlayer *GetPlayer(const int index);
	
	int Index;
	string Name;

	int Type;
	int Race;
	string AiName;

	Vec2i StartPos;
	//Wyrmgus start
	int StartMapLayer;
	//Wyrmgus end

	//Wyrmgus start
//	void SetStartView(const Vec2i &pos);
	void SetStartView(const Vec2i &pos, int z);
	//Wyrmgus end

	int Resources[MaxCosts];
	int StoredResources[MaxCosts];
	int Incomes[MaxCosts];
	const int Revenue[MaxCosts];

	bool AiEnabled;

	int NumBuildings;
	//Wyrmgus start
	int NumBuildingsUnderConstruction;
	//Wyrmgus end
	int Supply;
	int Demand;

	int UnitLimit;
	int BuildingLimit;
	int TotalUnitLimit;

	int Score;
	int TotalUnits;
	int TotalBuildings;
	int TotalResources[MaxCosts];
	int TotalRazings;
	int TotalKills;
	//Wyrmgus start
	int UnitTypeKills[UnitTypeMax];
	//Wyrmgus end

	int SpeedResourcesHarvest[MaxCosts];
	int SpeedResourcesReturn[MaxCosts];
	int SpeedBuild;
	int SpeedTrain;
	int SpeedUpgrade;
	int SpeedResearch;

	CUnit& GetUnit(int index) const;
	int GetUnitCount() const;

	//Wyrmgus start
	bool IsEnemy(const int index) const;
	//Wyrmgus end
	bool IsEnemy(const CPlayer &player) const;
	bool IsEnemy(const CUnit &unit) const;
	bool IsAllied(const CPlayer &player) const;
	bool IsAllied(const CUnit &unit) const;
	bool IsSharedVision(const CPlayer &player) const;
	bool IsSharedVision(const CUnit &unit) const;
	bool IsBothSharedVision(const CPlayer &player) const;
	bool IsBothSharedVision(const CUnit &unit) const;
	bool IsTeamed(const CPlayer &player) const;
	bool IsTeamed(const CUnit &unit) const;
	//Wyrmgus start
	bool HasNeutralFactionType() const;
	//Wyrmgus end
};

//Wyrmgus start
extern bool LanguageCacheOutdated;

extern void CleanPlayers();
extern void NetworkSetFaction(int player, std::string faction_name);
extern bool IsNameValidForWord(std::string word_name);
//Wyrmgus end